openapi: 3.0.1
info:
  title: Stores API - !DRAFT!
  description: API to access data of stores and other businesses. 
  contact:
    email: nicolai.schug@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /
tags:
- name: Stores API
  description: Everything about stores/businesses.
paths:
  /v1/stores:
    get:
      tags:
      - public
      summary: Returns all stores or a subset, depending on parameters
      description: |
        Returns stores associated with the given neighborhood or if available, otherwise uses the given string as an address and searches within a 5 km radius for stores. If the given text cannot be resolved at all, returns all available stores. 
      operationId: searchStores
      parameters:
      - name: neighborhood
        in: query
        description: A neighborhood e.g. Boxhagener Kiez or an address. 
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum number of records to return
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoreItem'
        400:
          description: bad input parameter
          content: {}
  /v1/stores/{storeId}:
    get:
      tags:
      - public
      summary: Find store by ID
      description: Returns a single store object
      operationId: getStoreById
      parameters:
      - name: storeId
        in: path
        description: ID of store to select
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreItem'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Store not found
          content: {}
components:
  schemas:
    StoreItem:
      required:
      - id
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: grocery store          
    Id:
      type: string
      format: uuid
      example: d290f1ee-6c54-4b01-90e6-d701748f0851
